#===========================================================================
# ~/.profile: Executed by the command interpreter for login shells
# This file is not read by bash, if ~/.bash_profile or ~/.bash_login exist
#===========================================================================

#--- Check ssh security
sudo /usr/local/bin/check_ssh_security.sh "user_login"

#--- Load docker injected variables
if [ -f /var/tmp/bosh-cli/bosh-cli.env ] ; then
  . /var/tmp/bosh-cli/bosh-cli.env
fi

#--- CA certs
export BOSH_CA_CERT="/etc/ssl/certs/ca-certificates.crt"

#--- CF cli environment
export CF_COLOR=true

#--- Modify home user (on shared disk)
export MY_BOSH_USER=`hostname`
export HOME=/data/shared/${MY_BOSH_USER}

#--- Create user directory
if [ ! -d ${HOME} ] ; then
  mkdir -p ${HOME}
fi

#--- Copy bash user configuration
cp /home/bosh/.bashrc ${HOME}/.bashrc

#--- Redefine GIT config file path
export XDG_CONFIG_HOME=${HOME}

#--- Redefine command history file path
export HISTFILE=${HOME}/.bash_history

#--- Link to Cloud Foundry plugins repository
if [ -L ${HOME}/.cf ] ; then
  rm ${HOME}/.cf
else
  if [ ! -d ${HOME}/.cf ] ; then
    mkdir -p ${HOME}/.cf
  fi
fi
if [ ! -L ${HOME}/.cf/plugins ] ; then
  rm -fr ${HOME}/.cf/plugins > /dev/null 2>&1
  ln -s /home/bosh/.cf/plugins ${HOME}/.cf/plugins
fi

#--- Redefine Path to binary
export PATH=.:/data/shared/${MY_BOSH_USER}/bin:${PATH}

#--- Init user aliases
cat > ${HOME}/.bash_aliases <<'EOF'
#--- Git aliases
alias checkout='function __gco() { git checkout $1 ; git pull --rebase; }; __gco'
alias commit='function __gcm() { git add . ; git commit -m "$1" ; unset -f __gcm; }; __gcm'
alias gitlog='git log --graph --pretty=format:'\''%C(yellow)%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cn %ci)%Creset'\'' --abbrev-commit'
alias init-git='. init-git.sh'
alias prune='git fetch --prune'
alias pull='git pull --rebase ; git fetch --prune'
alias push='git pull --rebase ; git fetch --prune ; git push'
alias status='git status'

#--- Cli log aliases
alias log-bosh='. log-bosh.sh'
alias log-cf='. log-cf.sh'
alias log-credhub='. log-credhub.sh'
alias log-fly='. log-fly.sh'
alias log-k8s='. log-k8s.sh'
alias log-openstack='. log-openstack.sh'
alias log-shield='. log-shield.sh'
alias log-uaac='. log-uaac.sh'

#--- Docker aliases
alias dim='docker images'
alias dps='docker ps -a'
alias dprune='docker container prune'
alias dsh='function __dsh() { docker exec -it $1 sh; }; __dsh'

#--- Tools aliases
alias bosh-clean-prometheus-tasks='for var in $(bosh tasks | grep "queued" | grep "prometheus" | awk "{print $1}") ; do bosh cancel-task $var ; done'
alias bosh-task='function __bt() { bosh task $1 --debug | grep -vE " BEGIN| COMMIT| SELECT |INSERT INTO|DELETE FROM| UPDATE | WHERE |Renewing lock"; }; __bt'
alias credhub-get='function __cg() { log-credhub -i ; credhub get -n $1 -j | jq .value -r; }; __cg'
alias diff='colordiff'
alias f='function __f() { printf "%100s\n"|tr " " "=";find . ! -regex ".*[/]\.git[/]?.*" -type f,l -not -xtype l -not -xtype d -print0 | xargs -0 grep -I -i --color "$1";unset -f __f;printf "%100s\n"|tr " " "="; }; __f'
alias fly='fly -t concourse'
alias generate-password='apg -MCLN -n 1 -m 30'
alias init-mc='. init-mc.sh'
alias init-pynsxv='. init-pynsxv.sh'
alias os='openstack'
alias proxy='. proxy.sh'
alias toggle-proxy='. proxy.sh'
alias prune-workers='fly prune-worker -a'
alias pynsxv='pynsxv -i $HOME/.nsx.ini'
alias show-cert='function __scrt() { openssl x509 -text -in $1; }; __scrt'
alias show-csr='function __scsr() { openssl req -noout -text -in $1; }; __scsr'
alias switch='. switch.sh'
alias tn='function __tn() { echo -ne "\033]0;$@\007";unset -f __t;printf "\n"; }; __tn'
alias tools='. tools.sh'

EOF

#--- Init bash profile
cat > ${HOME}/.bash_profile <<'EOF'
#--- Load user configuration
. ~/.bashrc

#--- Colors and styles
export RED='\033[31m'
export GREEN='\033[32m'
export YELLOW='\033[33m'
export BLUE='\033[34m'
export CYAN='\033[36m'

export STD='\033[0m'
export BOLD='\033[1m'
export REVERSE='\033[7m'

#--- Set user prompt
parse_git_branch()
{
  local BRANCH=$(git symbolic-ref HEAD --short 2> /dev/null)
  if [ ! -z "${BRANCH}" ] ; then
    echo "(${BRANCH})"
  else
    echo ""
  fi
}

export PS1="\[\033[32m\]\h@${SITE_NAME}\[\033[36m\]\$(parse_git_branch)\[\033[0m\]:\[\033[34m\]\w\[\033[0m\]\$ "

#--- Set locales
export LANG=en_US.UTF-8
export LANGUAGE=en_US

#--- Set terminal name (can change with "t" alias)
echo -en "\033]0;${MY_BOSH_USER}@${SITE_NAME}\007"

#--- Grep colorization
export GREP_COLORS="fn=1;34:se=1;34:mt=1;33"

#--- Bosh dynamic completion
eval "$(/home/bosh/bosh-complete-linux bash-source)"

#--- Fly cli auto-completion
_fly_bash_autocomplete() {
  #--- All arguments except the first one
  args=("${COMP_WORDS[@]:1:$COMP_CWORD}")
  #--- Only split on newlines
  local IFS=$'\n'
  #--- Call completion (note that the first element of COMP_WORDS is the executable itself)
  COMPREPLY=($(GO_FLAGS_COMPLETION=1 ${COMP_WORDS[0]} "${args[@]}"))
  return 0
}

complete -F _fly_bash_autocomplete fly

#--- Minio cli auto-completion
_mc_bash_autocomplete() {
  local cur opts base
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --compgen )
  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}

complete -F _mc_bash_autocomplete mc -q

#--- Jump-list of in use directories
if [ -f /usr/local/bin/z.sh ] ; then
  source /usr/local/bin/z.sh
fi

#--- Interactive filter for command-line
if [ -f /home/bosh/.fzf.bash ] ; then
  source /home/bosh/.fzf.bash
fi

#--- Load OSB-CMDB bash functions
if [ -f /usr/local/bin/cf-cli-cmdb-functions.bash ] ; then
  source /usr/local/bin/cf-cli-cmdb-functions.bash
fi

EOF

#--- Load user bash profile
. ${HOME}/.bash_profile

cd ${HOME}